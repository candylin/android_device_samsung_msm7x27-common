From 78b3f7c22ed38a929f561eb18d10e162032f4dd8 Mon Sep 17 00:00:00 2001
From: Raviprasad V Mummidi <rapmv78@gmail.com>
Date: Mon, 30 Jan 2012 15:18:41 -0800
Subject: [PATCH 3/3] Add support for Panorama mode.

This is a combination of 2 commits.
The first commit's message is:

Add support for Panorama mode.
https://github.com/rapmv78/android_packages_apps_Camera/commit/97666c3c3a89c1cabe859b4ade349a877889e5e1

This is the 2nd commit message:

Fix Panorama mode colors.

Fix Panorama mode colors by doing YVU conversion in CPU.
https://github.com/rapmv78/android_packages_apps_Camera/commit/652e2f0ea6c024129b3302a346854d02c74fdaf5

Change-Id: I1dfb43bc0df484446bd7f3abf9ccf60f1803922a
---
 jni/Android.mk                                     |    1 +
 .../src/mosaic_renderer/SurfaceTextureRenderer.cpp |    3 +--
 .../src/mosaic_renderer/WarpRenderer.cpp           |    2 ++
 .../src/mosaic_renderer/YVURenderer.cpp            |   12 ++++++++++-
 jni/feature_mos_jni.cpp                            |   22 ++++++++++++++++++++
 jni/mosaic_renderer_jni.cpp                        |    3 +++
 .../android/camera/panorama/PanoramaActivity.java  |    8 +++++--
 7 files changed, 46 insertions(+), 5 deletions(-)

diff --git a/jni/Android.mk b/jni/Android.mk
index 882e3a7..a883b06 100755
--- a/jni/Android.mk
+++ b/jni/Android.mk
@@ -10,6 +10,7 @@ LOCAL_C_INCLUDES := \
         $(LOCAL_PATH)/feature_mos/src/mosaic
 
 LOCAL_CFLAGS := -O3 -DNDEBUG
+LOCAL_CFLAGS += -DCPU_COLOR_CONVERT
 
 LOCAL_SRC_FILES := \
         feature_mos_jni.cpp \
diff --git a/jni/feature_mos/src/mosaic_renderer/SurfaceTextureRenderer.cpp b/jni/feature_mos/src/mosaic_renderer/SurfaceTextureRenderer.cpp
index 7e9cfe6..87aafd4 100755
--- a/jni/feature_mos/src/mosaic_renderer/SurfaceTextureRenderer.cpp
+++ b/jni/feature_mos/src/mosaic_renderer/SurfaceTextureRenderer.cpp
@@ -153,6 +153,7 @@ bool SurfaceTextureRenderer::DrawTexture(GLfloat *affine)
         // And, finally, execute the GL draw command.
         glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_SHORT, g_iIndices2);
 
+        glFlush();
         glBindFramebuffer(GL_FRAMEBUFFER, 0);
         succeeded = true;
     } while (false);
@@ -178,7 +179,6 @@ const char* SurfaceTextureRenderer::VertexShaderSource() const
 const char* SurfaceTextureRenderer::FragmentShaderSource() const
 {
     static const char gFragmentShader[] =
-        "#extension GL_OES_EGL_image_external : require\n"
         "precision mediump float;\n"
         "varying vec2 vTextureNormCoord;\n"
 #ifdef MISSING_EGL_EXTERNAL_IMAGE
@@ -189,6 +189,5 @@ const char* SurfaceTextureRenderer::FragmentShaderSource() const
         "void main() {\n"
         "  gl_FragColor = texture2D(sTexture, vTextureNormCoord);\n"
         "}\n";
-
     return gFragmentShader;
 }
diff --git a/jni/feature_mos/src/mosaic_renderer/WarpRenderer.cpp b/jni/feature_mos/src/mosaic_renderer/WarpRenderer.cpp
index af6779a..bf37cd3 100755
--- a/jni/feature_mos/src/mosaic_renderer/WarpRenderer.cpp
+++ b/jni/feature_mos/src/mosaic_renderer/WarpRenderer.cpp
@@ -149,9 +149,11 @@ bool WarpRenderer::DrawTexture(GLfloat *affine)
 
         checkGlError("glDrawElements");
 
+        glFlush();
         glBindFramebuffer(GL_FRAMEBUFFER, 0);
         succeeded = true;
     } while (false);
+    glBindFramebuffer(GL_FRAMEBUFFER, 0);
     return succeeded;
 }
 
diff --git a/jni/feature_mos/src/mosaic_renderer/YVURenderer.cpp b/jni/feature_mos/src/mosaic_renderer/YVURenderer.cpp
index f7dcf6f..9599531 100755
--- a/jni/feature_mos/src/mosaic_renderer/YVURenderer.cpp
+++ b/jni/feature_mos/src/mosaic_renderer/YVURenderer.cpp
@@ -113,6 +113,7 @@ bool YVURenderer::DrawTexture()
 
         checkGlError("glDrawElements");
 
+        glFlush();
         glBindFramebuffer(GL_FRAMEBUFFER, 0);
         succeeded = true;
     } while (false);
@@ -137,6 +138,7 @@ const char* YVURenderer::VertexShaderSource() const
 
 const char* YVURenderer::FragmentShaderSource() const
 {
+#ifndef CPU_COLOR_CONVERT
     static const char gFragmentShader[] =
         "precision mediump float;\n"
         "uniform sampler2D s_texture;\n"
@@ -155,6 +157,14 @@ const char* YVURenderer::FragmentShaderSource() const
         "  p = texture2D(s_texture, v_texCoord);\n"
         "  gl_FragColor[3] = dot(p, coeff_y);\n"
         "}\n";
-
+#else
+    static const char gFragmentShader[] =
+        "precision mediump float;\n"
+        "uniform sampler2D s_texture;\n"
+        "varying vec2 v_texCoord;\n"
+        "void main() {\n"
+        "  gl_FragColor = texture2D(s_texture, v_texCoord);\n"
+        "}\n";
+#endif
     return gFragmentShader;
 }
diff --git a/jni/feature_mos_jni.cpp b/jni/feature_mos_jni.cpp
index e40b75a..4c08257 100644
--- a/jni/feature_mos_jni.cpp
+++ b/jni/feature_mos_jni.cpp
@@ -354,10 +354,32 @@ void ConvertYVUAiToPlanarYVU(unsigned char *planar, unsigned char *in, int width
 
     for (int i = 0; i < planeSize; i++)
     {
+#ifndef CPU_COLOR_CONVERT
         *Yptr++ = *in++;
         *Vptr++ = *in++;
         *Uptr++ = *in++;
         in++;   // Alpha
+#else // CPU_COLOR_CONVERT
+        int y, v, u;
+
+        y = (  66 * in[0] + 152 * in[1] +  25 * in[2] + 16);
+        v = ( 112 * in[0] -  94 * in[1] -  18 * in[2] + 128);
+        u = (- 38 * in[0] -  75 * in[1] + 112 * in[2] + 128);
+
+        y >>= 8;
+        v >>= 8;
+        u >>= 8;
+        
+        y += 16;
+        v += 128;
+        u += 128;
+
+        *Yptr++ = (unsigned char) (y);
+        *Vptr++ = (unsigned char) (v);
+        *Uptr++ = (unsigned char) (u);
+        in += 4;   // Alpha
+
+#endif // CPU_COLOR_CONVERT
     }
 }
 
diff --git a/jni/mosaic_renderer_jni.cpp b/jni/mosaic_renderer_jni.cpp
index 50312c4..af1cc07 100644
--- a/jni/mosaic_renderer_jni.cpp
+++ b/jni/mosaic_renderer_jni.cpp
@@ -638,6 +638,7 @@ JNIEXPORT void JNICALL Java_com_android_camera_panorama_MosaicRenderer_preproces
 
     gSurfTexRenderer[LR].DrawTexture(g_dAffinetransIdentGL);
     gSurfTexRenderer[HR].DrawTexture(g_dAffinetransIdentGL);
+    glFlush();
 }
 
 #ifndef now_ms
@@ -663,6 +664,7 @@ JNIEXPORT void JNICALL Java_com_android_camera_panorama_MosaicRenderer_transferG
     gYVURenderer[LR].DrawTexture();
     gYVURenderer[HR].DrawTexture();
 
+    glFlush();
     sem_wait(&gPreviewImage_semaphore);
     // Bind to the input LR FBO and read the Low-Res data from there...
     glBindFramebuffer(GL_FRAMEBUFFER, gBufferInputYVU[LR].GetFrameBufferName());
@@ -691,6 +693,7 @@ JNIEXPORT void JNICALL Java_com_android_camera_panorama_MosaicRenderer_transferG
     checkGlError("glReadPixels HR");
 
     sem_post(&gPreviewImage_semaphore);
+    glBindFramebuffer(GL_FRAMEBUFFER, 0);
 }
 
 JNIEXPORT void JNICALL Java_com_android_camera_panorama_MosaicRenderer_step(
diff --git a/src/com/android/camera/panorama/PanoramaActivity.java b/src/com/android/camera/panorama/PanoramaActivity.java
index 3278bd6..01d5ff9 100755
--- a/src/com/android/camera/panorama/PanoramaActivity.java
+++ b/src/com/android/camera/panorama/PanoramaActivity.java
@@ -465,7 +465,7 @@ public class PanoramaActivity extends ActivityBase implements
                 // means users exit and come back to panorama. Do not start the
                 // preview. Preview will be started after final mosaic is
                 // generated.
-                if (!mPausing && !mThreadRunning) {
+                if (!mPausing) {
                     startCameraPreview();
                 }
             }
@@ -933,7 +933,11 @@ public class PanoramaActivity extends ActivityBase implements
 
     private void resetToPreview() {
         reset();
-        if (!mPausing) startCameraPreview();
+        if (!mPausing) {
+           mMosaicView.onPause();
+           mMosaicView.onResume();
+           startCameraPreview();
+        }
     }
 
     private void showFinalMosaic(Bitmap bitmap) {
-- 
1.7.9.5

