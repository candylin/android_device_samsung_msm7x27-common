From 09ac8ef7b80cfc9ccf51519d4136ab246ddf721e Mon Sep 17 00:00:00 2001
From: Emerson Pinter <dev@pinter.com.br>
Date: Wed, 11 Jul 2012 23:47:20 -0300
Subject: [PATCH 1/2] graphics: Add directives for compatibility with older
 EGL blobs (2/2)

Port from CM9.
Original author Ricardo Cerqueira
https://github.com/cyanogenmod/android_frameworks_base/commit/fc496c0607d0d2863ff9587019e890ab806ea49d

Change-Id: If30f10f1d4b26547d1219e2ba05f6a831b8fbff8

Conflicts:

	libs/ui/GraphicBufferAllocator.cpp
---
 libs/ui/GraphicBufferAllocator.cpp                 |    9 +++++++++
 libs/ui/GraphicBufferMapper.cpp                    |   13 +++++++++++++
 opengl/include/GLES/glext.h                        |    4 ++++
 opengl/include/GLES2/gl2ext.h                      |    4 ++++
 opengl/libagl/state.cpp                            |    2 ++
 .../DisplayHardware/DisplayHardware.cpp            |    4 ++++
 services/surfaceflinger/Layer.cpp                  |    5 +++++
 7 files changed, 41 insertions(+)

diff --git a/libs/ui/GraphicBufferAllocator.cpp b/libs/ui/GraphicBufferAllocator.cpp
index 7e93a7f..cdccfc1 100644
--- a/libs/ui/GraphicBufferAllocator.cpp
+++ b/libs/ui/GraphicBufferAllocator.cpp
@@ -113,6 +113,15 @@ status_t GraphicBufferAllocator::alloc(uint32_t w, uint32_t h,
     // we have a h/w allocator and h/w buffer is requested
     status_t err; 
 
+#ifdef MISSING_EGL_PIXEL_FORMAT_YV12
+    if (format == HAL_PIXEL_FORMAT_YV12) {
+	format = HAL_PIXEL_FORMAT_RGBX_8888;
+    }
+    if (usage & GRALLOC_USAGE_EXTERNAL_DISP) {
+	usage ^= GRALLOC_USAGE_EXTERNAL_DISP;
+    }
+#endif
+
 #ifdef EXYNOS4_ENHANCEMENTS
     if ((format == 0x101) || (format == 0x105)) {
         // 0x101 = HAL_PIXEL_FORMAT_YCbCr_420_P (Samsung-specific pixel format)
diff --git a/libs/ui/GraphicBufferMapper.cpp b/libs/ui/GraphicBufferMapper.cpp
index b7dd8ec..f99edf0 100644
--- a/libs/ui/GraphicBufferMapper.cpp
+++ b/libs/ui/GraphicBufferMapper.cpp
@@ -75,10 +75,23 @@ status_t GraphicBufferMapper::lock(buffer_handle_t handle,
 {
     ATRACE_CALL();
     status_t err;
+#ifdef MISSING_GRALLOC_BUFFERS
+    int tries=5;
+#endif
 
     err = mAllocMod->lock(mAllocMod, handle, usage,
             bounds.left, bounds.top, bounds.width(), bounds.height(),
             vaddr);
+#ifdef MISSING_GRALLOC_BUFFERS
+    while (err && tries) {
+	usleep(1000);
+        err = mAllocMod->unlock(mAllocMod, handle);
+        err = mAllocMod->lock(mAllocMod, handle, usage,
+            bounds.left, bounds.top, bounds.width(), bounds.height(),
+            vaddr);
+	tries--;
+    }
+#endif
 
     ALOGW_IF(err, "lock(...) failed %d (%s)", err, strerror(-err));
     return err;
diff --git a/opengl/include/GLES/glext.h b/opengl/include/GLES/glext.h
index 54afaab..dcf27fb 100644
--- a/opengl/include/GLES/glext.h
+++ b/opengl/include/GLES/glext.h
@@ -71,7 +71,11 @@ typedef void* GLeglImageOES;
 /* GL_OES_EGL_image_external */
 #ifndef GL_OES_EGL_image_external
 /* GLeglImageOES defined in GL_OES_EGL_image already. */
+#ifdef MISSING_EGL_EXTERNAL_IMAGE
+#define GL_TEXTURE_EXTERNAL_OES                                 0x0DE1
+#else
 #define GL_TEXTURE_EXTERNAL_OES                                 0x8D65
+#endif
 #define GL_TEXTURE_BINDING_EXTERNAL_OES                         0x8D67
 #define GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES                     0x8D68
 #endif
diff --git a/opengl/include/GLES2/gl2ext.h b/opengl/include/GLES2/gl2ext.h
index 8f8d80a..c7cef5c 100644
--- a/opengl/include/GLES2/gl2ext.h
+++ b/opengl/include/GLES2/gl2ext.h
@@ -60,7 +60,11 @@ typedef void* GLeglImageOES;
 /* GL_OES_EGL_image_external */
 #ifndef GL_OES_EGL_image_external
 /* GLeglImageOES defined in GL_OES_EGL_image already. */
+#ifdef MISSING_EGL_EXTERNAL_IMAGE
+#define GL_TEXTURE_EXTERNAL_OES                                 0x0DE1
+#else
 #define GL_TEXTURE_EXTERNAL_OES                                 0x8D65
+#endif
 #define GL_SAMPLER_EXTERNAL_OES                                 0x8D66
 #define GL_TEXTURE_BINDING_EXTERNAL_OES                         0x8D67
 #define GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES                     0x8D68
diff --git a/opengl/libagl/state.cpp b/opengl/libagl/state.cpp
index 4bc653a..bb0fb94 100644
--- a/opengl/libagl/state.cpp
+++ b/opengl/libagl/state.cpp
@@ -192,9 +192,11 @@ static void enable_disable(ogles_context_t* c, GLenum cap, int enabled)
         // these need to fall through into the rasterizer
         c->rasterizer.procs.enableDisable(c, cap, enabled);
         break;
+#ifndef MISSING_EGL_EXTERNAL_IMAGE
     case GL_TEXTURE_EXTERNAL_OES:
         c->rasterizer.procs.enableDisable(c, GL_TEXTURE_2D, enabled);
         break;
+#endif
 
     case GL_MULTISAMPLE:
     case GL_SAMPLE_ALPHA_TO_COVERAGE:
diff --git a/services/surfaceflinger/DisplayHardware/DisplayHardware.cpp b/services/surfaceflinger/DisplayHardware/DisplayHardware.cpp
index bb93215..1f85afc 100644
--- a/services/surfaceflinger/DisplayHardware/DisplayHardware.cpp
+++ b/services/surfaceflinger/DisplayHardware/DisplayHardware.cpp
@@ -247,8 +247,12 @@ void DisplayHardware::init(uint32_t dpy)
     eglGetConfigs(display, NULL, 0, &numConfigs);
 
     EGLConfig config = NULL;
+#ifdef FORCE_EGL_CONFIG
+    config = (EGLConfig)FORCE_EGL_CONFIG;
+#else
     err = selectConfigForPixelFormat(display, attribs, format, &config);
     ALOGE_IF(err, "couldn't find an EGLConfig matching the screen format");
+#endif
     
     EGLint r,g,b,a;
     eglGetConfigAttrib(display, config, EGL_RED_SIZE,   &r);
diff --git a/services/surfaceflinger/Layer.cpp b/services/surfaceflinger/Layer.cpp
index 84a9060..6c4da6c 100644
--- a/services/surfaceflinger/Layer.cpp
+++ b/services/surfaceflinger/Layer.cpp
@@ -787,7 +787,12 @@ uint32_t Layer::getEffectiveUsage(uint32_t usage) const
         // need a hardware-protected path to external video sink
         usage |= GraphicBuffer::USAGE_PROTECTED;
     }
+#ifdef MISSING_GRALLOC_BUFFERS
+    usage |= GraphicBuffer::USAGE_HW_TEXTURE;
+#else
     usage |= GraphicBuffer::USAGE_HW_COMPOSER;
+#endif
+
     return usage;
 }
 
-- 
1.7.9.5

